<?php

/**
 * @file
 * A module used for PayPal's PayFlow Pro gateway.
 *
 * For credits, see http://drupal.org/project/uc_payflowpro
 */
define('UC_PFP_OSTYPE_WINDOWS', 1);
define('UC_PFP_OSTYPE_LINUX', 2);

// Must always include files that contain hooks.  TODO: Utilize dynamic loading and module_load_include
require_once('payflowpro_utils.inc');

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu()
 */
function uc_payflowpro_menu() {
  // Tool for testing XML requests to gateway.
  $items['admin/settings/uc_payflowpro_debug'] = array(
    'title' => 'PFP Debug',
    'page callback' => 'uc_payflowpro_debug',
    'access arguments' => array('administer products'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}




/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/



/**
 * Implementation of hook_payment_gateway()
 */
function uc_payflowpro_payment_gateway() {

  $gateways[] = array(
    'id' => 'payflowpro',
    'title' => t('PayPal PayFlow Pro'),
    'description' => t('Process credit card payments using the PayFlow service of PayPal.'),
    'settings' => 'uc_payflowpro_settings_form',
    'credit' => 'uc_payflowpro_charge',
  );

  return $gateways;
}

function uc_payflowpro_charge($order_id, $amount, $data) {
  // Check that all required functions exist
  if (!_uc_payflowpro_check_requirements()) {
    return array('success' => FALSE);
  }

  global $user, $response;
  $order = uc_order_load($order_id);

  $request = _uc_payflowpro_cc_sale_xml($order_id, $amount, $data);
  $response = _uc_payflowpro_submit_xml($request);

  if (!$response) {
    $message = t('Received blank response from the PayFlow Pro gateway.');
    $result = array(
      'success' => FALSE,
      'comment' => t('Received blank response from the PayFlow Pro gateway.'),
      'message' => t('Received blank response from the PayFlow Pro gateway.'),
      'uid' => $user->uid,
    );
    return $result;
  }

  $txn_result_code = $response->Result;
  $txn_message = $response->Message;

  if ((int)$txn_result_code != 0) {
    $message = t('Credit card declined for !amount with error code !return_code (!message).', array(
      '!amount' => uc_currency_format($amount),
      '!return_code' => $txn_result_code,
      '!message' => $txn_message,
    ));
    $data = array();
    $data['pnref'] = (string)$response->PNRef;
    $data['authcode'] = (string)$response->AuthCode;
    $data['result'] = (string)$response->Result;
    $result = array(
      'success' => FALSE,
      'comment' => t('Credit card payment declined: !text', array('!text' => $txn_message)),
      'message' => t('Credit card payment declined: !text', array('!text' => $txn_message)),
      'uid' => $user->uid,
      'data' => $data,
    );
  }
  else {
    $x_approval_code = $response->AuthCode;
    $pnref = $response->PNRef;
    $message = t('Credit card payment processed successfully with approval code !code and pnref !pnref.', array(
      '!code' => $x_approval_code,
      '!pnref' => $pnref,
    ));
    $data = array();
    $data['pnref'] = (string)$response->PNRef;
    $data['authcode'] = (string)$response->AuthCode;
    $data['result'] = (string)$response->Result;
    $result = array(
      'success' => TRUE,
      'comment' => t('Credit card payment processed successfully with approval code !code and pnref !pnref.', array('!code' => $x_approval_code, '!pnref' => $pnref)),
      'message' => t('Credit card payment processed successfully with approval code !code and pnref !pnref.', array('!code' => $x_approval_code, '!pnref' => $pnref)),
      'uid' => $user->uid,
      'data' => $data,
    );
  }
  uc_order_comment_save($order_id, $user->uid, $message, 'admin');

  return $result;
}

/**
 * Check for 0 balance and update the status
 * hook_order
 */
function uc_payflowpro_order($op, &$arg1, $arg2) {

  switch ($op) {
    case 'update':
      if ($arg1->order_status == 'in_checkout' && $arg2 == 'pending') {
        # Check the balnace
        if ((float)uc_payment_balance($arg1) == 0.0) {
          # Update the status
          uc_order_update_status($arg1->order_id, 'payment_received');
        }
      }
      break;
  }
  return;
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Callback for payment gateway settings.
 */
function uc_payflowpro_settings_form() {
  $form['payflowpro_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('PayFlow Pro settings'),
    '#element_validate' => array('uc_payflow_pro_pfp_gateway_validate'),
  );

  $form['payflowpro_settings']['uc_payflowpro_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Mode'),
    '#default_value' => variable_get('uc_payflowpro_mode', 'test'),
    '#options' => array(
      'test' => 'Test',
      'live' => 'Live',
    ),
  );
  $form['payflowpro_settings']['uc_payflowpro_payment_action'] = array(
    '#type' => 'select',
    '#title' => t('Payment action'),
    '#description' => t('Complete Sale will authorize and capture the funds at the time the payment is processed.<br>Authorization will only reserve funds on the card to be captured later through your PayFlow account.'),
    '#options' => array(
      'Sale' => t('Complete Sale'),
      'Authorization' => t('Authorization'),
    ),
    '#default_value' => variable_get('uc_payflowpro_payment_action', 'Sale'),
  );
  $form['payflowpro_settings']['uc_payflowpro_cert_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Certificate path'),
    '#description' => t('This is the path to your certificates that you
                         downloaded from the PayFlow Pro site.'),
    '#default_value' => variable_get('uc_payflowpro_cert_path', drupal_get_path('module', 'uc_payflowpro') . '/cacert/cacert.pem'),
  );

  $form['payflowpro_settings']['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('API Credentials'),
    '#description' => t('PayFlow Pro account information (test this at manager.paypal.com)'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE, // TODO: Change this to TRUE once the core password field clearing bug is fixed.
  );
  $form['payflowpro_settings']['api']['uc_payflowpro_partner'] = array(
    '#type' => 'textfield',
    '#title' => t('Partner'),
    '#default_value' => variable_get('uc_payflowpro_partner', 'PayPal'),
    '#description' => t('The ID provided to you by the authorized PayPal Reseller who registered you for the Payflow Pro service.  If you purchased your account directly from PayPal, use PayPal.  Otherwise, it is typically Verisign.  This is case sensitive.'),
  );
  // PayFlow XMLPay Guide refers to this as vendor instead of merchant
  $form['payflowpro_settings']['api']['uc_payflowpro_vendor'] = array(
    '#type' => 'textfield',
    '#title' => t('Vendor'),
    '#default_value' => variable_get('uc_payflowpro_vendor', ''),
    '#description' => t('The vendor name for the PayFlow service.'),
  );
  $form['payflowpro_settings']['api']['uc_payflowpro_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#default_value' => variable_get('uc_payflowpro_user', ''),
    '#description' => t('The user name for the PayFlow service (this is often the same as the Vendor name).'),
  );
  $form['payflowpro_settings']['api']['uc_payflowpro_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => variable_get('uc_payflowpro_password', ''),
    '#description' => t('PayFlow password.  WARNING: Until a core bug #486544 is fixed, you will need to re-enter your password if you change any settings.'),
  );

  return $form;
}

function uc_payflow_pro_pfp_gateway_validate($element, &$form_state) {
  if (! $form_state['values']['uc_pg_payflowpro_enabled']) {
    return; // Gateway not enabled, config options irrelevant.
  }

  if (!is_readable($form_state['values']['uc_payflowpro_cert_path'])) {
    form_set_error('uc_payflow_pro_pfp_account_validate_path', t('Certificate path invalid. Please be sure the path is correct and the file is readable.'));
  }

  // API Creds section.  Slightly different messages depending on what is missing to provide better feedback.
  if (empty($form_state['values']['uc_payflowpro_partner']) || empty($form_state['values']['uc_payflowpro_vendor'])) {
    form_set_error('uc_payflow_pro_pfp_account_validate_req', t('Payflow Pro Partner and Vendor are required fields.'));
  }
  if (empty($form_state['values']['uc_payflowpro_user'])) {
    // The web service requires this field, but manager.paypal.com does not.  Make the difference fairly transparent to the end user.
    $form_state['values']['uc_payflowpro_user'] = $form_state['values']['uc_payflowpro_vendor'];
  }
  if (empty($form_state['values']['uc_payflowpro_password'])) {
    form_set_error('uc_payflow_pro_pfp_account_validate_pass', t('Payflow Pro password is required.'));
  }
}



/*******************************************************************************
 * XML Helper Functions
 ******************************************************************************/

// Submit request to PayFlow
function _uc_payflowpro_submit_xml($xml, $mode = NULL) {
  // DEBUG: Return false to not submit
  $xml = trim($xml);

  // Info
  $certpath = variable_get('uc_payflowpro_cert_path', '');

  $servers['test'] = 'https://pilot-payflowpro.paypal.com:443';
  $servers['live'] = 'https://payflowpro.paypal.com:443';

  if($mode == null) {
    $url = $servers[variable_get('uc_payflowpro_mode', 'test')];
  }
  else {
    $url = $servers[$mode];
  }

  $request_id = md5($xml . time());
  $user_agent = 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)';

  $headers[] = "Content-Type: text/xml"; // either text/namevalue or text/xml
  $headers[] = "X-VPS-Timeout: 30";
  $headers[] = "X-VPS-VIT-OS-Name: Linux";  // Name of your Operating System (OS)
  $headers[] = "X-VPS-VIT-OS-Version: RHEL 4";  // OS Version
  $headers[] = "X-VPS-VIT-Client-Type: PHP/cURL";  // Language you are using
  $headers[] = "X-VPS-VIT-Client-Version: 1.0";  // For your info
  $headers[] = "X-VPS-VIT-Client-Architecture: x86";  // For your info
  $headers[] = "X-VPS-VIT-Client-Certification-Id: 33baf5893fc2123d8b191d2d011b7fdc"; // This header requirement will be removed
  $headers[] = "X-VPS-VIT-Integration-Product: Ubercart";  // For your info, would populate with application name
  $headers[] = "X-VPS-VIT-Integration-Version: 2.0"; // Application version
  $headers[] = "X-VPS-Request-ID: " . $request_id;

  $ch = curl_init();

  /*curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION,0);*/

  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);
  curl_setopt($ch, CURLOPT_HEADER, FALSE);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  //@curl_setopt($ch, CURLOPT_CAPATH, $certpath);
  curl_setopt($ch, CURLOPT_CAINFO, $certpath);

  //WARNING: Uncommenting below this would prevent curl from detecting a 'man in the middle' attack
  //curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  //curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
  //

  curl_setopt($ch, CURLOPT_FORBID_REUSE, TRUE);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, FALSE);

  $curl_response = curl_exec($ch);

  if (!$curl_response) {
    watchdog('uc_payflowpro', 'Connecting to PayFlow server failed: %error', array('%error' => curl_error($ch)), WATCHDOG_ERROR);
  }

  curl_close($ch);

  if ($curl_response == '') {
    $response = FALSE;
  }
  else {
    $xml_response = @simplexml_load_string($curl_response);
    if ($xml_response === FALSE) {
      // Response wasn't valid XML, some errors come back as strings.
      watchdog('uc_payflowpro', 'PayFlow server returned a non-XML error: %error', array('%error' => $curl_response), WATCHDOG_ERROR);
      $response = FALSE;
    }
    elseif(isset($xml_response->ResponseData->RecurringProfileResults)) {
      $response = $xml_response->ResponseData->RecurringProfileResults;
      //var_dump($xml,$response);
    }
    else {
      $response = $xml_response->ResponseData->TransactionResults->TransactionResult;
    }
  }

  return $response;
}

// Generates the common portion of the XML transaction request
// Changed payflowpro_merchant to vendor
function _uc_payflowpro_wrap_xml($transaction) {
  $xml = '<?xml version="1.0" encoding="UTF-8"?>
<XMLPayRequest Timeout="30" version = "2.0" xmlns="http://www.paypal.com/XMLPay">
  <RequestData>
    <Vendor>' . check_plain(variable_get('uc_payflowpro_vendor', '')) . '</Vendor>
    <Partner>' . check_plain(variable_get('uc_payflowpro_partner', '')) . '</Partner>
    <Transactions>
      <Transaction>
' . $transaction . '
      </Transaction>
    </Transactions>
  </RequestData>
  <RequestAuth>
    <UserPass>
      <User>' . check_plain(variable_get('uc_payflowpro_user', '')) . '</User>
      <Password>' . check_plain(variable_get('uc_payflowpro_password', '')) . '</Password>
    </UserPass>
  </RequestAuth>
</XMLPayRequest>';

  return $xml;
}

// Generates XML for the items list
function _uc_payflowpro_items_xml($order) {
  $subtotal = 0;

  $item_number = 0;
  $xml = "              <Items>\n";
  foreach ($order->products as $product) {
    $subtotal += $product->qty * $product->price;
    $xml .= '                <Item Number="' . ++$item_number . '">
                  <SKU>' . check_plain($product->model) . '</SKU>
                  <UPC>' . check_plain($product->model) . '</UPC>
                  <Description>' . check_plain($product->title) . '</Description>
                  <Quantity>' . intval($product->qty) . '</Quantity>
                  <UnitPrice>' . floatval($product->price) . '</UnitPrice>
                </Item>
';
  }
  $xml .= '              </Items>
              <ItemAmt>' . uc_currency_format($subtotal, FALSE, FALSE, '.') . '</ItemAmt>';

  return $xml;
}

// Generate XML for Invoice section of request
function _uc_payflowpro_invoice_xml($order) {
  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  if ($billing_country === FALSE) {
    $billing_country = array(0 => array('country_iso_code_2' => 'US'));
  }

  $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));
  if ($delivery_country === FALSE) {
    $delivery_country = array(0 => array('country_iso_code_2' => 'US'));
  }

  $shipping = 0;
  foreach ($order->line_items as $line_item) {
    if ($line_item['type'] == 'shipping') {
      $shipping += $line_item['amount'];
    }
  }

  $tax = 0;
  if (module_exists('uc_taxes')) {
    foreach (uc_taxes_calculate($order) as $tax_item) {
      $tax += $tax_item->amount;
    }
  }

  $xml = '            <Invoice>
              <InvNum>' . intval($order->order_id) . '</InvNum>
              <Comment>' . check_plain(_uc_get_skus($order)) . '</Comment>
              <BillTo>
                <Name>' . trim(check_plain($order->billing_first_name . ' ' . $order->billing_last_name)) . '</Name>
                <Phone>' . check_plain($order->billing_phone) . '</Phone>
                <EMail>' . check_plain($order->primary_email) . '</EMail>
                <CustCode>' . $order->uid . '</CustCode>
                <Address>
                  <Street>' .trim(check_plain($order->billing_street1 . ' ' . $order->billing_street2)) . '</Street>
                  <City>' . check_plain($order->billing_city) . '</City>
                  <State>' . check_plain(uc_get_zone_code($order->billing_zone)) . '</State>
                  <Zip>' . check_plain($order->billing_postal_code) . '</Zip>
                  <Country>' . check_plain($billing_country[0]['country_iso_code_2']) . '</Country>
                </Address>
              </BillTo>
              <ShipTo>
                <Name>' . check_plain($order->delivery_first_name . ' ' . $order->delivery_last_name) . '</Name>
                <Phone>' . check_plain($order->delivery_phone) . '</Phone>
                <EMail>' . check_plain($order->primary_email) . '</EMail>
                <Address>
                  <Street>' .trim(check_plain($order->delivery_street1 . ' ' . $order->delivery_street2)) . '</Street>
                  <City>' . check_plain($order->delivery_city) . '</City>
                  <State>' . check_plain(uc_get_zone_code($order->delivery_zone)) . '</State>
                  <Zip>' . check_plain($order->delivery_postal_code) . '</Zip>
                  <Country>' . check_plain($delivery_country[0]['country_iso_code_2']) . '</Country>
                </Address>
              </ShipTo>
' . _uc_payflowpro_items_xml($order) . '
              <ShippingAmt>' . uc_currency_format($shipping, FALSE, FALSE, '.') . '</ShippingAmt>
              <TaxAmt>' . uc_currency_format($tax, FALSE, FALSE, '.') . '</TaxAmt>
              <TotalAmt>' . uc_currency_format($order->order_total, FALSE, FALSE, '.') . '</TotalAmt>
            </Invoice>';

  return $xml;
}

function _uc_get_skus($order) {
  $skus = array();
  foreach ($order->products as $product) {
    $skus[] = $product->model;
  }
  return "SKUS: " . implode('|', $skus);

}

// Generate XML for credit card sale
function _uc_payflowpro_cc_sale_xml($order_id, $amount, $data) {
  $order = uc_order_load($order_id);

   // Get payment action (Sale or Authorization)
  $payment_action = variable_get('uc_payflowpro_payment_action', '');

  if (strlen($cc_exp_month) == 2) {
    $cc_exp = $cc_exp_year .  $cc_exp_month;
  }

  $xml = '         <' . $payment_action . '>
          <PayData>
' . _uc_payflowpro_invoice_xml($order) . '
            <Tender>
' . _uc_payflowpro_cc_info_xml($order_id) . '
            </Tender>
          </PayData>
        </' . $payment_action . '>';

  return _uc_payflowpro_wrap_xml($xml);
}

// Generate a credit card XML
function _uc_payflowpro_cc_info_xml($order_id) {
  $order = uc_order_load($order_id);
  $cc_exp_year = $order->payment_details['cc_exp_year'];
  $cc_exp_month = sprintf('%02d', $order->payment_details['cc_exp_month']);

  if (strlen($cc_exp_month) == 2) {
    $cc_exp = $cc_exp_year .  $cc_exp_month;
  }

  $xml = '
              <Card>
                <CardNum>' . check_plain($order->payment_details['cc_number']) . '</CardNum>
                <ExpDate>' . check_plain($cc_exp) . '</ExpDate>
                <ExtData Name="FIRSTNAME" Value="' . check_plain($order->billing_first_name) . '"></ExtData>
                <ExtData Name="LASTNAME" Value="' . check_plain($order->billing_last_name) . '"></ExtData>
                <CVNum>' . check_plain($order->payment_details['cc_cvv']) . '</CVNum>
              </Card>
        ';
  return $xml;
}

/*******************************************************************************
 * Other helper functions
 ******************************************************************************/

// check for required modules
function _uc_payflowpro_check_requirements() {
  $success = TRUE;

  if (!function_exists('curl_init')) {
    drupal_set_message(t('The PayFlow Pro service requires cURL. Please talk to your system administrator to get this configured.'));
    $success = FALSE;
  }

  if (!function_exists('simplexml_load_string')) {
    drupal_set_message(t('The PayFlow Pro service requires simpleXML. Please talk to your system administrator to get this configured.'));
    $success = FALSE;
  }

  return $success;
}

function _uc_payflowpro_detect_os() {
  static $ostype;
  if($ostype != '') {
    return $ostype;
  }

  $winos = eregi("windows", strtolower(php_uname()));
  if($winos) {
    $ostype['type'] = UC_PFP_OSTYPE_WINDOWS;
    $ostype['path_sep'] = '\\';
  }
  else {
    $ostype['type'] = UC_PFP_OSTYPE_LINUX;
    $ostype['path_sep'] = '/';
  }
  return $ostype;
}

function _autopilot_sanitize_path($path) {
  if( _autopilot_detect_os == UC_PFP_OSTYPE_WINDOWS ) {
    return str_replace('/', '\\', $path);
  }
  else {
    return str_replace('\\','/', $path);
  }
}


/**
 * Debug form
 */
function uc_payflowpro_debug() {
  $form_values = $_POST;
  $page = '';

  // Process
  if($form_values['op'] == t('Send')) {
    drupal_set_message(t('Transaction sent...'));
    $response = _uc_payflowpro_submit_xml($form_values['xml_code'], $form_values['mode']);
    $page .= '<h3>Result: (also check for log entries)</h3><pre>' . var_export($response, TRUE) . '</pre><hr/>';
  }

  $page .= drupal_get_form('uc_payflowpro_debug_form', $form_values);

  return $page;
}

function uc_payflowpro_debug_form($form_values = array()) {
  $form = array();
  $form['#redirect'] = false;
  $form['info'] = array('#value' => '<strong>' . t('Dont forget to use the xml header like: ' . htmlentities( '<?xml version="1.0" encoding="UTF-8"?>') .  'on the first line.') . '</strong>');
  $form['xml_code'] = array(
    '#type' => 'textarea',
    '#title' => t('XML Code to send'),
    '#rows' => 40,
    '#default_value' => $form_values['xml_code'],
  );
  $form['send'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
  );
  $form['mode'] = array(
    '#type' => 'select',
    '#title' => t('Mode'),
    '#options' => array('test' => 'Test', 'live' => 'Live'),
    '#default_value' => $form_values['mode'],
  );

  return $form;
}

/**
 *
[03-Nov-2007 05:58:30] SimpleXMLElement Object
(
    [Result] => 0
    [ProcessorResult] => SimpleXMLElement Object
        (
            [AVSResult] => Z
            [CVResult] => N
            [HostCode] => 00
        )

    [FraudPreprocessResult] => SimpleXMLElement Object
        (
            [Message] => No Rules Triggered
        )

    [FraudPostprocessResult] => SimpleXMLElement Object
        (
            [Message] => No Rules Triggered
        )

    [IAVSResult] => N
    [AVSResult] => SimpleXMLElement Object
        (
            [StreetMatch] => No Match
            [ZipMatch] => Match
        )

    [CVResult] => No Match
    [Message] => Approved
    [PNRef] => V78E0C39D7E8
    [AuthCode] => 010101
    [ExtData] => SimpleXMLElement Object
        (
            [@attributes] => Array
                (
                    [Name] => VISACARDLEVEL
                    [Value] => A
                )

        )

)


[03-Nov-2007 13:55:03] SimpleXMLElement Object
(
    [Result] => 0
    [Message] => Approved
    [ProfileID] => RT0000000148
    [RPRef] => R7950C3ABBA8
)


[03-Nov-2007 13:55:03] SimpleXMLElement Object
(
    [Result] => 0
    [ProcessorResult] => SimpleXMLElement Object
        (
            [AVSResult] => Z
            [CVResult] => N
            [HostCode] => 00
        )

    [FraudPreprocessResult] => SimpleXMLElement Object
        (
            [Message] => No Rules Triggered
        )

    [FraudPostprocessResult] => SimpleXMLElement Object
        (
            [Message] => No Rules Triggered
        )

    [IAVSResult] => N
    [AVSResult] => SimpleXMLElement Object
        (
            [StreetMatch] => No Match
            [ZipMatch] => Match
        )

    [CVResult] => No Match
    [Message] => Approved
    [PNRef] => V18E0C8B7551
    [AuthCode] => 010101
    [ExtData] => SimpleXMLElement Object
        (
            [@attributes] => Array
                (
                    [Name] => VISACARDLEVEL
                    [Value] => A
                )

        )

)


[03-Nov-2007 13:55:06] SimpleXMLElement Object
(
    [Result] => 0
    [Message] => Approved
    [ProfileID] => RT0000000149
    [RPRef] => R1950C8B7555
)
 */
