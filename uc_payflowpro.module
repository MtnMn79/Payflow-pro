<?php
// $Id$

/**
 * @file
 * A module used for PayPal's PayFlow Pro gateway.
 *
 * Developed by David Strauss (http://fourkitchens.com/ | david@fourkitchens.com)
 * and Marshal Newrock (https://idealso.com/ | marshal@idealso.com)
 *
 */
define('UC_PFP_OSTYPE_WINDOWS', 1);
define('UC_PFP_OSTYPE_LINUX', 2);

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu()
 */
function uc_payflowpro_menu($may_cache) {
  _uc_payflowpro_include_init();

  if ($may_cache) {
    // Callback functions for Express Checkout
    $items[] = array(
      'path' => 'cart/echeckout/selected',
      'title' => t('Review order'),
      'callback' => 'uc_payflowpro_ec_review_redirect',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'cart/echeckout/review',
      'title' => t('Review payment'),
      'callback' => 'uc_payflowpro_ec_review',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'cart/echeckout/submit',
      'title' => t('Submit order'),
      'callback' => 'uc_payflowpro_ec_submit',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'cart/echeckout/complete',
      'title' => t('Order complete'),
      'callback' => 'uc_payflowpro_ec_complete',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
    $items[] = array(
      'path' => 'cart/echeckout/cancel',
      'title' => t('PayPal payment cancelled'),
      'callback' => 'uc_payflowpro_ec_cancel',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK,
    );
  }

  // Recurring Billing administration
  $items[] = array(
    'path' => 'admin/store/settings/uc_recurring',
    'title' => t('Payflow Pro Recurring Settings'),
    'callback' => 'uc_payflowpro_recurring_settings',
    'access' => user_access('administer content'),
    'description' => t('Payflow Pro recurring billing settings.'),
  );
  $items[] = array(
    'path' => 'admin/store/settings/uc_recurring/overview',
    'title' => t('Overview'),
    'callback' => 'uc_payflowpro_recurring_settings',
    'access' => user_access('administer content'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[] = array(
    'path' => 'admin/store/settings/uc_recurring/schedules',
    'title' => t('Schedules'),
    'callback' => 'uc_payflowpro_recurring_schedules',
    'access' => user_access('administer content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items[] = array(
    'path' => 'admin/store/settings/uc_recurring/products',
    'title' => t('Products'),
    'callback' => 'uc_payflowpro_recurring_products',
    'access' => user_access('administer content'),
    'type' => MENU_LOCAL_TASK,
  );
  $items[] = array(
    'path' => 'admin/store/settings/uc_recurring/administer',
    'title' => t('Profiles'),
    'callback' => 'uc_payflowpro_user_panel',
    'access' => user_access('administer content'),
    'type' => MENU_LOCAL_TASK,
  );


  $items[] = array(
    'path' => 'admin/settings/uc_payflowpro_debug',
    'title' => t('PFP Debug'),
    'callback' => 'uc_payflowpro_debug',
    'access' => user_access('administer content'),
    'type' => MENU_CALLBACK,
  );


  // Recurring must be enabled to see the panel.  TODO: better permission to check, see D6.
  if(arg(0) == 'user' && variable_get('uc_payflowpro_enable_recurring', 0)) {
    $items[] = array(
      'path' => 'user/' . arg(1) . '/pfp_cpanel',
      'title'=> t('Account Panel'),
      'callback' => 'uc_payflowpro_user_panel',
      'type' => MENU_LOCAL_TASK,
      'access' => user_access('access content'),
    );
  }


  return $items;
}


/**
 * Implementation of hook_form_alter()
 * To allow express checkout
 */
function uc_payflowpro_form_alter($form_id, &$form) {
  if ($form_id == 'uc_cart_checkout_form' && variable_get('uc_payment_method_payflowpro_ec_checkout', FALSE)) {
    $form['#submit'] = (array)$form['#submit'] + array('uc_payflowpro_ec_checkout' => array());
  }

  if ($form_id == 'uc_cart_checkout_review_form' && !empty($_SESSION['TOKEN'])) {
    $form['#submit'] = (array)$form['#submit'] + array('uc_payflowpro_ec_submit_form_submit' => array());
  }

}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_cart_pane()
 */
function uc_payflowpro_cart_pane() {
  $panes[] = array(
    'id' => 'uc_payflowpro_ec',
    'title' => t('PayPal Express Checkout'),
    'enabled' => FALSE,
    'weight' => 1,
    'body' => '<div align="right">'. drupal_get_form('uc_payflowpro_ec_form') .'</div>',
  );

  return $panes;
}

/**
* Implementation of hook_payment_method().
 */
function uc_payflowpro_payment_method() {
  $title1 = '<img src="https://www.paypal.com/en_US/i/logo/PayPal_mark_37x23.gif" style="position: relative; top: 5px; margin-right: 4px;">'
            . t('PayPal - pay without sharing your financial information.');

  $methods[] = array(
    'id' => 'payflowpro_ec',
    'name' => t('PayPal Express Checkout'),
    'title' => $title1,
    'review' => t('PayPal'),
    'desc' => t('Complete orders through PayPal Express Checkout.'),
    'callback' => 'uc_payment_method_payflowpro_ec',
    'weight' => 1,
    'checkout' => FALSE,
    'backend' => FALSE,
  );

  return $methods;
}

/**
 * Implementation of hook_payment_gateway()
 */
function uc_payflowpro_payment_gateway() {

  $gateways[] = array(
    'id' => 'payflowpro',
    'title' => t('PayPal PayFlow Pro'),
    'description' => t('Process credit card payments using the PayFlow service of PayPal.'),
    'settings' => 'uc_payflowpro_settings_form',
    'credit' => 'uc_payflowpro_charge',
  );

  return $gateways;
}

/**
 * Charge the card
 */
function uc_payflowpro_charge($order_id, $amount, $data) {
  // Check that all required functions exist
  if (!_uc_payflowpro_check_requirements()) {
    return array('success' => FALSE);
  }

  global $user, $response;
  $order = uc_order_load($order_id);

  $request = _uc_payflowpro_cc_sale_xml($order_id, $amount, $data);
  $response = _uc_payflowpro_submit_xml($request);

  if (!$response) {
    $message = t('Received blank response from the PayFlow Pro gateway.');
    $result = array(
      'success' => FALSE,
      'comment' => t('Received blank response from the PayFlow Pro gateway.'),
      'message' => t('Received blank response from the PayFlow Pro gateway.'),
      'order_id' => $order_id,
    );
    return $result;
  }

  $txn_result_code = $response->Result;
  $txn_message = $response->Message;

  $check_result_code = (int)$txn_result_code;
  $approved_results = _uc_payflowpro_get_approved_results();
  if (!in_array($check_result_code, $approved_results)) {
    $message = t('Credit card declined for !amount with error code !return_code.', array('!amount' => uc_currency_format($amount), '!return_code' => $txn_result_code));
    $data = array();
    $data['pnref'] = (string)$response->PNRef;
    $data['authcode'] = (string)$response->AuthCode;
    $data['result'] = (string)$response->Result;
    $result = array(
      'success' => FALSE,
      'comment' => t('Credit card payment declined: !text', array('!text' => $txn_message)),
      'message' => t('Credit card payment declined: !text', array('!text' => $txn_message)),
      'uid' => $user->uid,
      'data' => $data,
    );
  }
  else {
    $x_approval_code = $response->AuthCode;
    $pnref = $response->PNRef;
    $message = t('Credit card payment processed successfully with approval code !code and pnref !pnref.', array('!code' => $x_approval_code, '!pnref' => $pnref));
    $data = array();
    $data['pnref'] = (string)$response->PNRef;
    $data['authcode'] = (string)$response->AuthCode;
    $data['result'] = (string)$response->Result;
    $result = array(
      'success' => TRUE,
      'comment' => t('Credit card payment processed successfully with approval code !code and pnref !pnref.', array('!code' => $x_approval_code, '!pnref' => $pnref)),
      'message' => t('Credit card payment processed successfully with approval code !code and pnref !pnref.', array('!code' => $x_approval_code, '!pnref' => $pnref)),
      'uid' => $user->uid,
      'data' => $data,
    );
  }
  if($check_result_code != 0) {
    watchdog('uc_payflowpro', t('Error !return_code: !message for !amount.', array('!message' => (string)$response->Message, '!return_code' => $txn_result_code, '!amount' => uc_currency_format($amount) )));
  }
  uc_order_comment_save($order_id, $user->uid, $message, 'admin');
  if($result['success'] == true) {
    uc_payflowpro_recurring_charge_process($order, $result);
  }

  return $result;
}

function _uc_payflowpro_get_approved_results() {
  $user_codes = variable_get('uc_payflowpro_error_codes_accept', '0');
  $user_codes = explode(",", $user_codes);
  // Clean
  for($i=0;$i++;$i<count($user_codes)) {
    $user_codes[$i] = trim($user_codes[$i]);
  }
  if(!in_array(0, $user_codes)) {
    $user_codes[] = 0;
  }
  return $user_codes;
}

/**
 * Check for 0 balance and update the status
 * hook_order
 */
function uc_payflowpro_order($op, &$arg1, $arg2) {

  switch($op) {
    case 'update':
      if($arg1->order_status == 'in_checkout' && $arg2 == 'pending') {
        # Check the balnace
        if((float)uc_payment_balance($arg1) == 0.0) {
          # Update the status
          uc_order_update_status($arg1->order_id, 'payment_received');
        }
      }
      break;
  }
  return;
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Callback for payment gateway settings.
 */
function uc_payflowpro_settings_form() {
  $form['payflowpro_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('PayFlow Pro settings'),
  );

  $form['payflowpro_settings']['uc_payflowpro_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Mode'),
    '#default_value' => variable_get('uc_payflowpro_mode', 'test'),
    '#options' => array(
      'test' => 'Test',
      'live' => 'Live',
    ),
  );
  $form['payflowpro_settings']['uc_payflowpro_payment_action'] = array(
    '#type' => 'select',
    '#title' => t('Payment action'),
    '#description' => t('Complete Sale will authorize and capture the funds at the time the payment is processed.<br>Authorization will only reserve funds on the card to be captured later through your PayFlow account.'),
    '#options' => array(
      'Sale' => t('Complete Sale'),
      'Authorization' => t('Authorization'),
    ),
    '#default_value' => variable_get('uc_payflowpro_payment_action', 'Sale'),
  );
  $form['payflowpro_settings']['uc_payflowpro_cert_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Certificate path'),
    '#description' => t('This is the path to your certificates that you downloaded
                        from the PayFlow Pro site.'),
    '#default_value' => variable_get('uc_payflowpro_cert_path', ''),
  );
  $form['payflowpro_settings']['recurring'] = array(
    '#type' => 'fieldset',
    '#title' => t('Recurring Settings'),
    '#description' => t('Settings specific to recurring profiles.'),
    '#collapsible' => true,
    '#collapsed' => true,
  );
  $form['payflowpro_settings']['recurring']['uc_payflowpro_enable_recurring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable recurring products'),
    '#default_value' => variable_get('uc_payflowpro_enable_recurring', false),
    '#description' => t('Checking this box will enabled recurring profiles on
                        products that have an expiration.'),
  );
  $form['payflowpro_settings']['recurring']['uc_payflowpro_recurring_site_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Site key'),
    '#description' => t('The site key is used to namespace your site from other
                        sites. This should be short, all letters or numbers or both,
                        e.g. mysite, or prodsite, etc.'),
    '#default_value' => variable_get('uc_payflowpro_recurring_site_key', ''),
  );
  $form['payflowpro_settings']['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('API Credentials'),
    '#description' => t('PayFlow Pro account information'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['payflowpro_settings']['api']['uc_payflowpro_partner'] = array(
    '#type' => 'textfield',
    '#title' => t('Partner'),
    '#default_value' => variable_get('uc_payflowpro_partner', 'Verisign'),
    '#description' => t('The ID provided to you by the authorized PayPal Reseller who registered you for the Payflow Pro service.  If you purchased your account directly from PayPal, use PayPal.  This is case sensitive.'),
  );
  // PayFlow XMLPay Guide refers to this as vendor instead of merchant
  $form['payflowpro_settings']['api']['uc_payflowpro_vendor'] = array(
    '#type' => 'textfield',
    '#title' => t('Vendor'),
    '#default_value' => variable_get('uc_payflowpro_vendor', ''),
    '#description' => t('The vendor name for the PayFlow service.'),
  );
  $form['payflowpro_settings']['api']['uc_payflowpro_user'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#default_value' => variable_get('uc_payflowpro_user', ''),
    '#description' => t('The user name for the PayFlow service (may be the same as the vendor name).'),
  );
  $form['payflowpro_settings']['api']['uc_payflowpro_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => variable_get('uc_payflowpro_password', ''),
    '#description' => t('PayFlow password'),
  );

  // Acceptable Error Codes
  $form['payflowpro_settings']['error_codes'] = array(
    '#type' => 'fieldset',
    '#collapsible' => true,
    '#collapsed' => true,
    '#title' => t('Error Codes'),
    '#description' => t('Error code handeling.'),
  );
  $form['payflowpro_settings']['error_codes']['uc_payflowpro_error_codes_accept'] = array(
    '#type' => 'textarea',
    '#title' => t('Accepted Codes'),
    '#description' => t('Error codes to treat as ok. These codes WILL NOT be flagged. 0 is ALWAYS considered acceptable by default.
                        Please enter acceptable codes seperated by commas.'),
    '#default_value' => variable_get('uc_payflowpro_error_codes_accept', ''),
  );

  $form['payflowpro_settings']['ec'] = array(
    '#type' => 'fieldset',
    '#title' => t('Express Checkout'),
    '#description' => t('These settings are specifically for the alternate checkout system offered by Express Checkout.<br>To enable this on your site, you must enable the corresponding cart pane in the <em>Cart settings</em> menu.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['payflowpro_settings']['ec']['uc_payflowpro_ec_reqconfirmed_addr'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require Express Checkout users to use a PayPal confirmed shipping address.'),
    '#default_value' => variable_get('uc_payflowpro_ec_reqconfirmed_addr', FALSE),
  );
  $form['payflowpro_settings']['ec']['uc_payflowpro_ec_review_shipping'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable the shipping select form on the Review payment page.'),
    '#default_value' => variable_get('uc_payflowpro_ec_review_shipping', TRUE),
  );
  $form['payflowpro_settings']['ec']['uc_paypflowpro_ec_review_company'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable the company name box on the Review payment page.'),
    '#default_value' => variable_get('uc_payflowpro_ec_review_company', TRUE),
  );
  $form['payflowpro_settings']['ec']['uc_payflowpro_ec_review_phone'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable the contact phone number box on the Review payment page.'),
    '#default_value' => variable_get('uc_payflowpro_ec_review_phone', TRUE),
  );
  $form['payflowpro_settings']['ec']['uc_payflowpro_ec_review_comment'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable the comment text box on the Review payment page.'),
    '#default_value' => variable_get('uc_payflowpro_ec_review_comment', TRUE),
  );

  return $form;
}

/*******************************************************************************
 * Express Checkout Functions
 ******************************************************************************/

// Handles the Express Checkout payment method
function uc_payment_method_payflowpro_ec($op, &$arg1) {
  switch($op) {
    //case 'order-view':
    case 'settings':
      $form['redirect'] = array(
        '#value' => '<div>'. t('For Express Checkout, you need to !cp_link and !wpp_link.', array('!cp_link' => l(t('enable the cart pane'), 'admin/store/settings/cart/edit/panes'), '!wpp_link' => l(t('configure the PayFlow Pro settings'), 'admin/store/settings/payment/edit/gateways'))) .'</div>',
      );
      return $form;
  }
}

// Handles the review page for Express Checkout Mark Flow.
function uc_payflowpro_ec_review_redirect() {
  if (!isset($_SESSION['TOKEN']) || ($order = uc_order_load($_SESSION['cart_order'])) == FALSE) {
    unset($_SESSION['cart_order']);
    unset($_SESSION['have_details']);
    unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);
    drupal_set_message(t('An error has occurred in your PayPal payment. Please review your cart and try again.'));
    drupal_goto('cart');
  }

  $request = _uc_payflowpro_get_ec_xml($_SESSION['TOKEN']);
  $response = _uc_payflowpro_submit_xml($request);

  $_SESSION['PAYERID'] = $response->PayPalResult->PayerID;

  drupal_goto('cart/checkout/review');
}

// Handles the review page for Express Checkout Shortcut Flow.
function uc_payflowpro_ec_review() {
  if (!isset($_SESSION['TOKEN']) || ($order = uc_order_load($_SESSION['cart_order'])) == FALSE) {
    unset($_SESSION['cart_order']);
    unset($_SESSION['have_details']);
    unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);
    drupal_set_message(t('An error has occurred in your PayPal payment. Please review your cart and try again.'));
    drupal_goto('cart');
  }

  if ($_SESSION['have_details'][$order->order_id] !== TRUE) {
    $request = _uc_payflowpro_get_ec_xml($_SESSION['TOKEN']);
    $response = _uc_payflowpro_submit_xml($request);

    $_SESSION['PAYERID'] = $response->PayPalResult->PayerID;

    // get variables to populate form
    $billto_name = check_plain(trim($response->PayPalResult->Name));
    $name_split = strrpos($billto_name, ' ');
    if ($name_split > 0) {
      $billto_firstname = substr($billto_name, 0, $name_split);
      $billto_lastname = substr($billto_name, $name_split);
    }
    else {
      $billto_firstname = $billto_name;
      $billto_lastname = '';
    }

    if (empty($response->PayPalResult->ShipTo->Name)) {
      $shipto_firstname = $billto_firstname;
      $shipto_lastname = $billto_lastname;
    }
    else {
      $shipto_name = check_plain(trim($response->PayPalResult->Name));
      $name_split = strrpos($shipto_name, ' ');
      if ($name_split > 0) {
        $shipto_firstname = substr($shipto_name, 0, $name_split);
        $shipto_lastname = substr($shipto_name, $name_split);
      }
      else {
        $shipto_firstname = $shipto_name;
        $shipto_lastname = '';
      }
    }

    $zone_id = db_result(db_query("SELECT zone_id FROM {uc_zones} WHERE zone_code = '%s'", check_plain($response->PayPalResult->ShipTo->Address->State)));
    $country_id = db_result(db_query("SELECT country_id FROM {uc_countries} WHERE country_iso_code_2 = '%s'", check_plain($response->PayPalResult->ShipTo->Address->Country)));

    $order->delivery_first_name = $shipto_firstname;
    $order->delivery_last_name = $shipto_lastname;
    $order->delivery_street1 = check_plain($response->PayPalResult->ShipTo->Street);
    $order->delivery_city = check_plain($response->PayPalResult->ShipTo->City);
    $order->delivery_zone = !empty($zone_id) ? $zone_id : 0;
    $order->delivery_postal_code = check_plain($response->PayPalResult->ShipTo->Zip);
    $order->delivery_country = !empty($country_id) ? $country_id : 840;

    $order->billing_first_name = $billto_firstname;
    $order->billing_last_name = $billto_lastname;
    $order->billing_street1 = $response->PayPalResult->EMail;

    if (empty($order->primary_email)) {
      $order->primary_email = $response->PayPalResult->EMail;
    }
    $order->payment_method = 'payflowpro_ec';

    uc_order_save($order);

    $_SESSION['have_details'][$order->order_id] = TRUE;
  }

  $output = t("Your order is almost complete!  Please fill in the following details and click 'Continue checkout' to finalize the purchase.");

  $output .= drupal_get_form('uc_payflowpro_ec_review_form', $order);

  return $output;
}

// Present the final total to the user for checkout!
function uc_payflowpro_ec_submit() {
  if (!isset($_SESSION['TOKEN']) || ($order = uc_order_load($_SESSION['cart_order'])) == FALSE) {
    unset($_SESSION['cart_order'], $_SESSION['have_details']);
    unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);
    drupal_set_message(t('An error has occurred in your PayPal payment. Please review your cart and try again.'));
    drupal_goto('cart');
  }

  $output = '<div style="border: solid 1px #bbb;">'. _cart_review_table(FALSE) .'</div>';
  $output .= uc_order_pane_line_items('customer', $order);
  $output .= '<p>'. t("Your order is not complete until you click the 'Submit order' button below. Your PayPal account will be charged for the amount shown above once your order is placed. You will receive confirmation once your payment is complete.") .'</p>';
  $output .= drupal_get_form('uc_payflowpro_ec_submit_form');

  return $output;
}

// Redirects if a customer selects PayPal Express Checkout as a payment method.
function uc_payflowpro_ec_checkout($form_id, $form_values) {
  if ($form_values['panes']['payment']['pane']['payment_method'] != 'payflowpro_ec') {
    return;
  }

  if (!_uc_payflowpro_check_requirements()) {
    return array('success' => FALSE);
  }

  global $user;

  $order_id = intval($_SESSION['cart_order']);

  $order = uc_order_load($order_id);
  if ($order === FALSE || $order->order_status != uc_get_order_status_id('in_checkout')) {
    $_SESSION['cart_order'] = NULL;
    unset($_SESSION['cart_order']);
    drupal_goto('cart');
  }

  $request = _uc_payflowpro_set_ec_xml($order);
  $response = _uc_payflowpro_submit_xml($request);

  if (!$response) {
    drupal_set_message(t('Received blank message from PayPal.  Please try again later'));
    drupal_goto('cart/checkout');
  }

  $txn_result_code = $response->Result;
  $txn_message = $response->Message;

  if ((int)$txn_result_code != 0) {
    drupal_set_message(t('Error message from PayPal:<br>!message', array('!message' => $txn_message)), 'error');
    drupal_goto('cart/checkout');
  }

  $_SESSION['TOKEN'] = $response->PayPalResult->Token;

  header('Location: ' . _uc_payflowpro_ec_url());
  exit();
}

function uc_payflowpro_ec_complete($order_id = 0) {
  if (intval($order_id) < 1) {
    drupal_goto('cart');
  }

  if (intval($_SESSION['cart_order']) != $order_id) {
    $_SESSION['cart_order'] = $order_id;
  }

  $order = uc_order_load($order_id);

  if ($order === FALSE || $oder->order_status != uc_get_order_status_id('in_checkout')) {
    drupal_goto('cart');
  }

  // This lets us know it's a legitimate access of the complete page.
  $_SESSION['do_complete'] = TRUE;

  drupal_goto('cart/checkout/complete');
}

function uc_payflowpro_ec_cancel() {
  unset($_SESSION['cart_order']);

  drupal_set_message(t('Your PayPal.com payment was cancelled. Please feel free to continue shopping or contact us for assistance.'));

  drupal_goto('cart');
}

function _uc_payflowpro_ec_url() {
  if (variable_get('uc_payflowpro_mode', 'test') == 'test') {
    $url = 'https://www.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token='. $_SESSION['TOKEN'];
  }
  else {
    $url = 'https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token='. $_SESSION['TOKEN'];
  }

  return $url;
  header('Location: ' . $url);
}

/*******************************************************************************
 * Express Checkout Forms
 ******************************************************************************/

// Returns the form for Express Checkout Shortcut Flow.
function uc_payflowpro_ec_form() {
  if (!_uc_payflowpro_check_requirements()) {
    return array('success' => FALSE);
  }

  // Hack to allow the image button to submit.
  if (isset($_POST['submit_x'])) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'submit',
    );
  }

  $form['submit_image'] = array(
    '#value' => '<input name="submit" type="image" title="'. t('Checkout with PayPal.') .'" src="https://www.paypal.com/en_US/i/btn/btn_xpressCheckoutsm.gif" style="position: relative; top: -1.25em;">',
  );

  return $form;
}

// Returns the form for the custom Review Payment screen for Express Checkout.
function uc_payflowpro_ec_review_form($order) {
  if (module_exists('uc_quote') && variable_get('uc_payflowpro_ec_review_shipping', TRUE)) {
    // Remove once line items are out of checkout. -RS
    uc_add_base_path_js();
    drupal_add_js(drupal_get_path('module', 'uc_payment') .'/uc_payment.js');

    $result = uc_checkout_pane_quotes('view', $order, NULL);
    $form['panes'] = array('#tree' => TRUE);
    $form['panes']['quotes'] = $result->fields;
    $form['panes']['quotes']['pane']['#collapsible'] = FALSE;
    $form['panes']['quotes']['pane']['#title'] = t('Calculate shipping');

    // Fake the checkout form delivery information.
    $form['delivery_first_name'] = array('#type' => 'hidden', '#value' => $order->delivery_first_name);
    $form['delivery_last_name'] = array('#type' => 'hidden', '#value' => $order->delivery_last_name);
    $form['delivery_company'] = array('#type' => 'hidden', '#value' => $order->delivery_company);
    $form['delivery_street1'] = array('#type' => 'hidden', '#value' => $order->delivery_street1);
    $form['delivery_street2'] = array('#type' => 'hidden', '#value' => $order->delivery_street2);
    $form['delivery_city'] = array('#type' => 'hidden', '#value' => $order->delivery_city);
    $form['delivery_postal_code'] = array('#type' => 'hidden', '#value' => $order->delivery_postal_code);
    $form['delivery_phone'] = array('#type' => 'hidden', '#value' => $order->delivery_phone);
    $form['delivery_zone'] = array(
      '#type' => 'select',
      '#options' => drupal_map_assoc(array($order->delivery_zone)),
      '#default_value' => $order->delivery_zone,
      '#attributes' => array('style' => 'display: none;'),
    );
    $form['delivery_country'] = array(
      '#type' => 'select',
      '#options' => drupal_map_assoc(array($order->delivery_country)),
      '#default_value' => $order->delivery_country,
      '#attributes' => array('style' => 'display: none;'),
    );
  }

  if (variable_get('uc_payflowpro_ec_review_company', TRUE)) {
    $form['delivery_company'] = array(
      '#type' => 'textfield',
      '#title' => uc_get_field_name('company'),
      '#description' => t('Leave blank if shipping to a residence.'),
      '#default_value' => $order->delivery_company,
    );
  }

  if (variable_get('uc_payflowpro_ec_review_phone', TRUE)) {
    $form['delivery_phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Contact phone number'),
      '#default_value' => $order->delivery_phone,
      '#size' => 24,
    );
  }

  if (variable_get('uc_payflowpro_ec_review_comment', TRUE)) {
    $form['order_comments'] = array(
      '#type' => 'textarea',
      '#title' => t('Order comments'),
      '#description' => t('Special instructions or notes regarding your order.'),
    );
  }

  if (empty($form)) {
    drupal_goto('cart/echeckout/submit');
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue checkout'),
  );

  return $form;
}

// Submits an order, calling the NVP API to send the order total to PayPal.
function uc_payflowpro_ec_submit_form() {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit order'),
  );

  return $form;
}

/*******************************************************************************
 * Express Checkout Form Submissions
 ******************************************************************************/

function uc_payflowpro_ec_form_submit($form_id, $form_values) {
  global $user;
  $items = uc_cart_get_contents();

  if (!is_array($items) || count($items) == 0) {
    drupal_set_message(t('You do not have any items in your shopping cart.'));
    return;
  }

  $order = uc_order_new($user->uid);
  $order->products = $items;

  $request = _uc_payflowpro_set_ec_xml($order);
  $response = _uc_payflowpro_submit_xml($request);

  if (!$response) {
    drupal_set_message(t('Received blank message from PayPal.  Please try again later'));
    drupal_goto('cart/checkout');
  }

  $txn_result_code = $response->Result;
  $txn_message = $response->Message;

  if ((int)$txn_result_code != 0) {
    drupal_set_message(t('Error message from PayPal:<br>!message', array('!message' => $txn_message)), 'error');
    drupal_goto('cart/checkout');
  }

  uc_order_save($order);

  $_SESSION['cart_order'] = $order->order_id;
  $_SESSION['token'] = $response->PayPalResult->Token;

  header('Location: ' . _uc_payflowpro_ec_url());
  exit();
}

function uc_payflowpro_ec_review_form_validate($form_id, $form_values) {
  if (module_exists('uc_quote') && variable_get('uc_payflowpro_ec_review_shipping', TRUE)) {
    if (empty($form_values['panes']['quotes']['pane']['quote_method']) || !isset($_POST['quote-option'])) {
      drupal_set_message(t('You must specify a shipping option.'), 'error');
      return FALSE;
    }
  }
}

function uc_payflowpro_ec_review_form_submit($form_id, $form_values) {
  $order = uc_order_load($_SESSION['cart_order']);

  if (module_exists('uc_quote') && variable_get('uc_payflowpro_ec_review_shipping', TRUE)) {
    $order->quote['method'] = $form_values['panes']['quotes']['pane']['quote_method'];
    $order->quote['accessorials'] = isset($_POST['quote-option']) ? strval($_POST['quote-option']) : 0;
    $order->quote['rate'] = $_POST['rate'][$order->quote['accessorials']];
    $order->quote['quote_form'] = rawurldecode($_POST['quote-form']);
    $methods = module_invoke_all('shipping_method');
    $method = $methods[$order->quote['method']];
    $label = is_null($_POST['quote-option']) ? t('Error calculating shipping') : $method['quote']['accessorials'][$order->quote['accessorials']];                   $result = db_query("SELECT line_item_id FROM {uc_order_line_items} WHERE order_id = %d AND type = 'shipping'", $order->order_id);                               if ($lid = db_result($result)) {
      uc_order_update_line_item($lid, $label, $order->quote['rate']);
    }
    else {
      uc_order_line_item_add($order->order_id, 'shipping', $label, $order->quote['rate']);
    }
  }

  if (variable_get('uc_payflowpro_ec_review_company', TRUE)) {
    $order->delivery_company = $form_values['delivery_company'];
  }

  if (variable_get('uc_payflowpro_ec_review_phone', TRUE)) {
    $order->delivery_phone = $form_values['delivery_phone'];
  }

  if (variable_get('uc_payflowpro_ec_review_comment', TRUE)) {
    db_query("DELETE FROM {uc_order_comments} WHERE order_id = %d", $order->order_id);
    uc_order_comment_save($order->order_id, 0, $form_values['order_comments'], 'order');
  }

  uc_order_save($order);

  drupal_goto('cart/echeckout/submit');
}

function uc_payflowpro_ec_submit_form_submit($form_id, $form_values) {
  $order = uc_order_load($_SESSION['cart_order']);

  $request = _uc_payflowpro_do_ec_xml($order);
  $response = _uc_payflowpro_submit_xml($request);

  unset($_SESSION['TOKEN'], $_SESSION['PAYERID']);
  $_SESSION['do_complete'] = TRUE;

  drupal_goto('cart/checkout/complete');
}

/*******************************************************************************
 * XML Helper Functions
 ******************************************************************************/

// Submit request to PayFlow
function _uc_payflowpro_submit_xml($xml, $mode = null) {
  // DEBUG: Return false to not submit
  $xml = trim($xml);

  // Info
  $certpath = variable_get('uc_payflowpro_cert_path', '');

  $servers['test'] = 'https://pilot-payflowpro.paypal.com:443';
  $servers['live'] = 'https://payflowpro.paypal.com:443';

  if($mode == null) {
    $url = $servers[variable_get('uc_payflowpro_mode', 'test')];
  }
  else {
    $url = $servers[$mode];
  }

  $request_id = md5($xml . time());
  $user_agent = 'Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)';

  $headers[] = "Content-Type: text/xml"; // either text/namevalue or text/xml
  $headers[] = "X-VPS-Timeout: 30";
  $headers[] = "X-VPS-VIT-OS-Name: Linux";  // Name of your Operating System (OS)
  $headers[] = "X-VPS-VIT-OS-Version: RHEL 4";  // OS Version
  $headers[] = "X-VPS-VIT-Client-Type: PHP/cURL";  // Language you are using
  $headers[] = "X-VPS-VIT-Client-Version: 1.0";  // For your info
  $headers[] = "X-VPS-VIT-Client-Architecture: x86";  // For your info
  $headers[] = "X-VPS-VIT-Client-Certification-Id: 33baf5893fc2123d8b191d2d011b7fdc"; // This header requirement will be removed
  $headers[] = "X-VPS-VIT-Integration-Product: Ubercart";  // For your info, would populate with application name
  $headers[] = "X-VPS-VIT-Integration-Version: 1.0"; // Application version
  $headers[] = "X-VPS-Request-ID: " . $request_id;

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);
  curl_setopt($ch, CURLOPT_HEADER, FALSE);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_CAINFO, $certpath);

  //WARNING: Uncommenting below this would prevent curl from detecting a 'man in the middle' attack
  //curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  //curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);

  curl_setopt($ch, CURLOPT_FORBID_REUSE, TRUE);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, FALSE);

  $curl_response = curl_exec($ch);

  if (!$curl_response) {
    watchdog('uc_payflowpro', 'Connecting to PayFlow server failed: ' . curl_error($ch), WATCHDOG_ERROR);
  }

  curl_close($ch);

  if ($curl_response == '') {
    $response = FALSE;
  }
  else {
    $xml_response = @simplexml_load_string(utf8_encode($curl_response));
    // Check for bad string load.
    if(!isset($xml_response)) {
      return FALSE;
    }

    if(isset($xml_response->ResponseData->RecurringProfileResults)) {
      $response = $xml_response->ResponseData->RecurringProfileResults;
    }
    else {
      $response = $xml_response->ResponseData->TransactionResults->TransactionResult;
    }
  }

  return $response;
}

// Generates the common portion of the XML transaction request
// Changed payflowpro_merchant to vendor
function _uc_payflowpro_wrap_xml($transaction) {
  $xml = '<?xml version="1.0" encoding="UTF-8"?>
<XMLPayRequest Timeout="30" version = "2.0" xmlns="http://www.paypal.com/XMLPay">
  <RequestData>
    <Vendor>' . variable_get('uc_payflowpro_vendor', '') . '</Vendor>
    <Partner>' . variable_get('uc_payflowpro_partner', '') . '</Partner>
    <Transactions>
      <Transaction>
' . $transaction . '
      </Transaction>
    </Transactions>
  </RequestData>
  <RequestAuth>
    <UserPass>
      <User>' . variable_get('uc_payflowpro_user', '') . '</User>
      <Password>' . variable_get('uc_payflowpro_password', '') . '</Password>
    </UserPass>
  </RequestAuth>
</XMLPayRequest>';

  return $xml;
}

// Generates XML for the items list
function _uc_payflowpro_items_xml($order) {
  $subtotal = 0;

  $item_number = 0;
  $xml = "              <Items>\n";
  foreach ($order->products as $product) {
    $subtotal += $product->qty * $product->price;
    $xml .= '                <Item Number="' . ++$item_number . '">
                  <SKU>' . check_plain($product->model) . '</SKU>
                  <UPC>' . check_plain($product->model) . '</UPC>
                  <Description>' . check_plain($product->title) . '</Description>
                  <Quantity>' . intval($product->qty) . '</Quantity>
                  <UnitPrice>' . floatval($product->price) . '</UnitPrice>
                </Item>
';
  }
  $xml .= '              </Items>
              <ItemAmt>' . uc_currency_format($subtotal, FALSE, FALSE, '.') . '</ItemAmt>';

  return $xml;
}

// Generate XML for Invoice section of request
function _uc_payflowpro_invoice_xml($order) {
  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  if ($billing_country === FALSE) {
    $billing_country = array(0 => array('country_iso_code_2' => 'US'));
  }

  $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));
  if ($delivery_country === FALSE) {
    $delivery_country = array(0 => array('country_iso_code_2' => 'US'));
  }

  $shipping = 0;
  foreach ($order->line_items as $line_item) {
    if ($line_item['type'] == 'shipping') {
      $shipping += $line_item['amount'];
    }
  }

  $tax = 0;
  if (module_exists('uc_taxes')) {
    $taxes = uc_taxes_calculate($order);
    if (is_array($taxes)) {
      foreach ($taxes as $tax_item) {
        $tax += $tax_item['amount'];
      }
    }
  }

  $xml = '            <Invoice>
              <InvNum>' . intval($order->order_id) . '</InvNum>
              <Comment>' . check_plain(_uc_get_skus($order)) . '</Comment>
              <BillTo>
                <Name>' . trim(check_plain($order->billing_first_name . ' ' . $order->billing_last_name)) . '</Name>
                <Phone>' . check_plain($order->billing_phone) . '</Phone>
                <EMail>' . check_plain($order->primary_email) . '</EMail>
                <CustCode>' . $order->uid . '</CustCode>
                <Address>
                  <Street>' .trim(check_plain($order->billing_street1 . ' ' . $order->billing_street2)) . '</Street>
                  <City>' . check_plain($order->billing_city) . '</City>
                  <State>' . check_plain(uc_get_zone_code($order->billing_zone)) . '</State>
                  <Zip>' . check_plain($order->billing_postal_code) . '</Zip>
                  <Country>' . check_plain($billing_country[0]['country_iso_code_2']) . '</Country>
                </Address>
              </BillTo>
              <ShipTo>
                <Name>' . check_plain($order->delivery_first_name . ' ' . $order->delivery_last_name) . '</Name>
                <Phone>' . check_plain($order->delivery_phone) . '</Phone>
                <EMail>' . check_plain($order->primary_email) . '</EMail>
                <Address>
                  <Street>' .trim(check_plain($order->delivery_street1 . ' ' . $order->delivery_street2)) . '</Street>
                  <City>' . check_plain($order->delivery_city) . '</City>
                  <State>' . check_plain(uc_get_zone_code($order->delivery_zone)) . '</State>
                  <Zip>' . check_plain($order->delivery_postal_code) . '</Zip>
                  <Country>' . check_plain($delivery_country[0]['country_iso_code_2']) . '</Country>
                </Address>
              </ShipTo>
' . _uc_payflowpro_items_xml($order) . '
              <ShippingAmt>' . uc_currency_format($shipping, FALSE, FALSE, '.') . '</ShippingAmt>
              <TaxAmt>' . uc_currency_format($tax, FALSE, FALSE, '.') . '</TaxAmt>
              <TotalAmt>' . uc_currency_format($order->order_total, FALSE, FALSE, '.') . '</TotalAmt>
            </Invoice>';

  return $xml;
}

function _uc_get_skus($order) {
  $skus = array();
  foreach ($order->products as $product) {
    $skus[] = $product->model;
  }
  return "SKUS: " . implode('|', $skus);

}

// Generate XML for credit card sale
function _uc_payflowpro_cc_sale_xml($order_id, $amount, $data) {
  $order = uc_order_load($order_id);

  // Get payment action (Sale or Authorization)
  $payment_action = variable_get('uc_payflowpro_payment_action', '');

  if (strlen($cc_exp_month) == 2) {
    $cc_exp = $cc_exp_year .  $cc_exp_month;
  }

  $xml = '         <' . $payment_action . '>
          <PayData>
' . _uc_payflowpro_invoice_xml($order) . '
            <Tender>
' . _uc_payflowpro_cc_info_xml($order_id) . '
            </Tender>
          </PayData>
        </' . $payment_action . '>';

  return _uc_payflowpro_wrap_xml($xml);
}

// Generate a credit card XML
function _uc_payflowpro_cc_info_xml($order_id) {
  $order = uc_order_load($order_id);
  $cc_exp_year = $order->payment_details['cc_exp_year'];
  $cc_exp_month = sprintf('%02d', $order->payment_details['cc_exp_month']);

  if (strlen($cc_exp_month) == 2) {
    $cc_exp = $cc_exp_year .  $cc_exp_month;
  }

  $xml = '
              <Card>
                <CardNum>' . check_plain($order->payment_details['cc_number']) . '</CardNum>
                <ExpDate>' . check_plain($cc_exp) . '</ExpDate>
                <ExtData Name="FIRSTNAME" Value="' . check_plain($order->billing_first_name) . '"></ExtData>
                <ExtData Name="LASTNAME" Value="' . check_plain($order->billing_last_name) . '"></ExtData>
                <CVNum>' . check_plain($order->payment_details['cc_cvv']) . '</CVNum>
              </Card>
        ';
  return $xml;
}

// Generate XML for SetExpressCheckout
function _uc_payflowpro_set_ec_xml($order) {
  // Get payment action (Sale or Authorization)
  $payment_action = variable_get('uc_payflowpro_payment_action', '');

  $xml = '         <SetExpressCheckout>
          <' . $payment_action . '>
            <PayData>
' . _uc_payflowpro_invoice_xml($order) . '
              <Tender>
                <PayPal>
                  <EMail>' . check_plain($order->primary_email) . '</EMail>
                  <ReturnURL>' . url('cart/echeckout/selected', NULL, NULL, TRUE) . '</ReturnURL>
                  <CancelURL>' . url('uc_payflowpro/ec/cancel', NULL, NULL, TRUE) . '</CancelURL>
                  <ReqConfirmShipping>' . variable_get('uc_payflowpro_ec_reqconfirmed_addr') . '</ReqConfirmShipping>
                </PayPal>
              </Tender>
            </PayData>
          </' . $payment_action . '>
        </SetExpressCheckout>';

  return _uc_payflowpro_wrap_xml($xml);
}

// Generate XML for GetExpressCheckout
function _uc_payflowpro_get_ec_xml($token) {
  // Get payment action (Sale or Authorization)
  $payment_action = variable_get('uc_payflowpro_payment_action', '');

  $xml = '         <GetExpressCheckout>
          <' . $payment_action . '>
            <PayData>
              <Tender>
                <PayPal>
                  <Token>' . $token . '</Token>
                </PayPal>
              </Tender>
            </PayData>
          </' . $payment_action . '>
        </GetExpressCheckout>';

  return _uc_payflowpro_wrap_xml($xml);
}

// Generate XML for DoExpressCheckout
function _uc_payflowpro_do_ec_xml($order) {
  // Get payment action (Sale or Authorization)
  $payment_action = variable_get('uc_payflowpro_payment_action', '');

  $xml = '         <DoExpressCheckout>
          <' . $payment_action . '>
            <PayData>
' . _uc_payflowpro_invoice_xml($order) . '
              <Tender>
                <PayPal>
                  <Token>' . check_plain($_SESSION['TOKEN']) . ' </Token>
                  <PayerID>' . check_plain($_SESSION['PAYERID']) . '</PayerID>
                  <ButtonSource>Ubercart_ShoppingCart_EC_US</ButtonSource>
                </PayPal>
              </Tender>
            </PayData>
          </' . $payment_action . '>
          </DoExpressCheckout>';

  return _uc_payflowpro_wrap_xml($xml);
}

// Generate XML for Recurring profiles
function _uc_payflowpro_recurring_profile($order, $opt = array()) {
  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  if ($billing_country === FALSE) {
    $billing_country = array(0 => array('country_iso_code_2' => 'US'));
  }

  $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));
  if ($delivery_country === FALSE) {
    $delivery_country = array(0 => array('country_iso_code_2' => 'US'));
  }

  $shipping = 0;
  foreach ($order->line_items as $line_item) {
    if ($line_item['type'] == 'shipping') {
      $shipping += $line_item['amount'];
    }
  }

  $tax = 0;
  if (module_exists('uc_taxes')) {
    $taxes = uc_taxes_calculate($order);
    if (is_array($taxes)) {
      foreach ($taxes as $tax_item) {
        $tax += $tax_item['amount'];
      }
    }
  }

  $xml = '            <Invoice>
              <InvNum>' . intval($order->order_id) . '</InvNum>
              <BillTo>
                <Name>' . trim(check_plain($order->billing_first_name . ' ' . $order->billing_last_name)) . '</Name>
                <Phone>' . check_plain($order->billing_phone) . '</Phone>
                <EMail>' . check_plain($order->primary_email) . '</EMail>
                <CustCode>' . check_plain($order->uid) . '</CustCode>
                <Address>
                  <Street>' .trim(check_plain($order->billing_street1 . ' ' . $order->billing_street2)) . '</Street>
                  <City>' . check_plain($order->billing_city) . '</City>
                  <State>' . check_plain(uc_get_zone_code($order->billing_zone)) . '</State>
                  <Zip>' . check_plain($order->billing_postal_code) . '</Zip>
                  <Country>' . check_plain($billing_country[0]['country_iso_code_2']) . '</Country>
                </Address>
              </BillTo>
              <ShipTo>
                <Name>' . check_plain($order->delivery_first_name . ' ' . $order->delivery_last_name) . '</Name>
                <Phone>' . check_plain($order->delivery_phone) . '</Phone>
                <EMail>' . check_plain($order->primary_email) . '</EMail>
                <Address>
                  <Street>' .trim(check_plain($order->delivery_street1 . ' ' . $order->delivery_street2)) . '</Street>
                  <City>' . check_plain($order->delivery_city) . '</City>
                  <State>' . check_plain(uc_get_zone_code($order->delivery_zone)) . '</State>
                  <Zip>' . check_plain($order->delivery_postal_code) . '</Zip>
                  <Country>' . check_plain($delivery_country[0]['country_iso_code_2']) . '</Country>
                </Address>
              </ShipTo>
' . _uc_payflowpro_items_xml($order) . '
              <ShippingAmt>' . uc_currency_format($shipping, FALSE, FALSE, '.') . '</ShippingAmt>
              <TaxAmt>' . uc_currency_format($tax, FALSE, FALSE, '.') . '</TaxAmt>
              <TotalAmt>' . uc_currency_format($order->order_total, FALSE, FALSE, '.') . '</TotalAmt>
            </Invoice>';

  $smlq = '
          <RequestData>
            <Vendor>vendor</Vendor>
            <Partner>partner</Partner>
            <RecurringProfiles>
              <RecurringProfile Id="1">
                <Add>
                  <Tender>' .
                    _uc_payflowpro_cc_info_xml($oder->order_id) . '
                  </Tender>
                  <RPData>
                    <Name>' . check_plain($profile_name) . '</Name>
                    <TotalAmt>' . $recurring_amt . '</TotalAmt>
                    <Start>' . $profile_start_date . '</Start>
                    <Term>' . $profile_term . '</Term>
                    <PayPeriod>' . $profile_period . '</PayPeriod>
                    <EMail>' . check_plain($order->primary_email) . '</EMail>
                    <OptionalTrans>Sale</OptionalTrans>
                    <OptionalTransAmt>12</OptionalTransAmt>
                    <BillTo>
                      <Address>
                        <Street>123 4th street</Street>
                        <City>San Jose</City>
                        <State>CA</State>
                        <Zip>95032</Zip>
                      </Address>
                    </BillTo>
                  </RPData>
                </Add>
              </RecurringProfile>
            </RecurringProfiles>
          </RequestData>
          <RequestAuth>
            <UserPass>
              <User>user</User>
              <Password>password</Password>
            </UserPass>
          </RequestAuth>
';
  return $xml;
}

/*******************************************************************************
 * Cron Area and function
 ******************************************************************************/
/**
 * Implementation of hook_cron
 */
function uc_payflowpro_cron() {
  // Init and include classes
  _uc_payflowpro_include_init();

  // Update the items that where we need to find out their payment date.
  _uc_payflowpro_recurring_sync_status();
  if(variable_get('uc_payflowpro_enable_recurring', false) == true) {
    // Now we need to process the items
    _uc_payflowpro_recurring_process_recurring();
  }

  return;
}

/**
 * Syncs the Recurring Profiles information with PFP. This does not
 * do any processing of the profiles.
 */
function _uc_payflowpro_recurring_sync_status() {

  $rs = db_query("SELECT * FROM {uc_payflowpro_recurring_profiles} WHERE
                 (next_payment_date IS NULL || next_payment_date = 0 || last_status_check = 0 || last_status_check IS NULL)
                 AND (pfp_status = 'ACTIVE' || pfp_status = 0 || pfp_status IS NULL)
                 AND pfp_status != 'DEACTIVATED BY MERCHANT'");

  while($row = db_fetch_object($rs)) {
    $profile = new PayflowProRecurring($row->pfp_profile_id, _uc_payflowpro_get_auth());
    $profile->refresh();

    if($profile->getStatus() == 'ACTIVE') {
      $try = db_query("UPDATE {uc_payflowpro_recurring_profiles}
               SET profile_status = '%s', next_payment_date = %d, last_status_check = %d
               WHERE pfp_pid = %d",
               $profile->getStatus(), $profile->getNextPaymentDate('unix'), time(), $row->pfp_pid);
    }
    else {
      $try = db_query("UPDATE {uc_payflowpro_recurring_profiles}
               SET profile_status = '%s', next_payment_date = %d, last_status_check = %d
               WHERE pfp_pid = %d", $profile->getStatus(),
               0, time(), $row->pfp_pid);
    }
    if(!$try) {
      watchdog('payflow_cron', t('Sync error while updating %profile_id',
                                      array('%profile_id' => $profile->getProfileID())),
               WATCHDOG_ERROR);
    }
    else {
      watchdog('payflow_cron', t('Synced profile %profile_id: %next_payment_date, %status',
                                    array('%profile_id' => $profile->getProfileID(),
                                          '%next_payment_date' => $profile->getNextPaymentDate('M.d.Y'),
                                          '%status' => $profile->getLastPaymentStatus()))
               );
    }
  }
  return;
}

/**
 * This looks through the recurring table, and processes
 * the recurring items that need to be processed.
 */
function _uc_payflowpro_recurring_process_recurring() {
  set_time_limit('300');
  $rs = db_query("SELECT * FROM {uc_payflowpro_recurring_profiles}
                 WHERE profile_status = 'ACTIVE' AND
                 next_payment_date != 0 AND next_payment_date IS NOT NULL AND
                 next_payment_date + 86400 < %d", time());

  $count = 0;
  $total = db_num_rows($rs);
  while($row = db_fetch_object($rs)) {
    // Load up the profile
    $profile = new PayflowProRecurring($row->pfp_profile_id, _uc_payflowpro_get_auth());
    $profile->refresh();

    // Loop through each payment and record an order for each payment
    // made for the recurring product in the order.
    watchdog('payflow_cron', "Updating " . count($profile->getPaymentHistory()) . " payments.\n");
    foreach($profile->getPaymentHistory() as $payment) {
      if(db_num_rows(db_query("SELECT 1 FROM {uc_payflowpro_recurring_payments} WHERE pnref = '%s'", $payment['PNRef'])) == 0) {
        // Create the order
        $new_order = null;
        $shell_order = null;
        $new_order = uc_order_load($row->order_id);

        $new_order->order_id = null; // For saftey
        $shell_order = uc_order_new($row->uid);
        if($new_order->order_total == 0.0) {
          #watchdog('payflow_cron', "Found empty order {$row->order_id}. Skipping.\n");
          continue 2;
        }

        // Set the original order id to the new one
        $new_order->order_id = $shell_order->order_id;
        // Seve the order
        $try = uc_order_save($new_order);
        if($try === FALSE || uc_order_load($new_order->order_id) == false) {
          watchdog('payflow_cron', "UNABLE TO SAVE ORDER $new_order->order_id\n", WATCHDOG_CRITICAL);
          exit();
        }
        else {
          watchdog('payflow_cron', "Created order $new_order->order_id");
        }

        // Add a payment to the order
        $comment = "Logging payment from Payflow Pro for profile " . $profile->getProfileID();
        $data = array();
        $data['Amount'] = $payment['Amount'];
        $data = $payment;
        $data['pnref'] = $payment['PNRef'];
        $data['payment_num'] = $payment['PaymentNum'];
        $try = false;
        uc_payment_enter($new_order->order_id, 'payment_payflowpro', $data['Amount'], 0, NULL, $comment);

        // Insert the payment into the system
        $try = db_query("INSERT INTO {uc_payflowpro_recurring_payments}(order_id, orig_order_id, pfp_payment_id, pnref, payment_date, payment_status, payment_amt, payment_data)
                 VALUES(%d, %d, %d, '%s', %d, '%s', '%s', '%s')",
                 $new_order->order_id, $row->order_id, $payment['PaymentNum'], $payment['PNRef'], strtotime($payment['TransTime']), $payment['TransState'], $data['Amount'], serialize($data));
        // Record a balancing payment for the ubercart system
        watchdog('payflow_cron', "Adding payment to balance then new order.\n");
        _uc_payflowpro_cron_payment_entry($new_order->order_id, 'payment_payflowpro', $payment['Amount'], $new_order->uid, serialize(array()), "Balancing payment for automatic transaction payment.", time());
        watchdog('payflow_cron', "Payment added.\n");
        if(!$try || true) {
          uc_order_delete($new_order->order_id);
        }
        watchdog('payflow_cron', "Payment " . $payment['PaymentNum'] . " complete.\n");
      }
      else {
        watchdog('payflow_cron',"Payment " . $payment['PaymentNum'] . " located in system. Ref: " . $payment['PNRef'] . "\n");
      }
    }
    // Always update the next payment date
    db_query("UPDATE {uc_payflowpro_recurring_profiles} SET next_payment_date = %d WHERE pfp_profile_id = '%s'",
             $profile->getNextPaymentDate('unix'), $row->pfp_profile_id);
  }
  return;
}

/*******************************************************************************
 * Other helper functions
 ******************************************************************************/
// Terms
function _uc_payflowpro_recurring_periods($lu = '') {
  return _uc_display_period_map();
}

// check for required modules
function _uc_payflowpro_check_requirements() {
  $success = TRUE;

  if (!function_exists('curl_init')) {
    drupal_set_message(t('The PayFlow Pro service requires cURL. Please talk to your system administrator to get this configured.'));
    $success = FALSE;
  }

  if (!function_exists('simplexml_load_string')) {
    drupal_set_message(t('The PayFlow Pro service requires simpleXML. Please talk to your system administrator to get this configured.'));
    $success = FALSE;
  }

  return $success;
}

/**
 * Helper function for the cron run to enter a payment
 * into the Ubercart system.
 */
function _uc_payflowpro_cron_payment_entry($order_id, $method, $amount, $uid, $data, $comment, $date = null) {
  if($date == null) {
    $date = time();
  }
  $method_name = _payment_method_data($method, 'review');
  if (empty($method_name)) {
    $method_name = _payment_method_data($method, 'name');
  }
  if (is_null($method_name)) {
    $method_name = t('Other');
  }
  if (is_array($data)) {
    $data = serialize($data);
  }

  if (variable_get('uc_payment_logging', TRUE)) {
    global $user;
    $log_message = t('!method payment for !amount entered by !user.',
                     array('!method' => $method_name,
                           '!amount' => uc_currency_format($amount),
                           '!user' => uc_get_initials($user->uid)));
    uc_order_log_changes($order_id, array($log_message));
  }

  db_query("INSERT INTO {uc_payment_receipts} (receipt_id, order_id, method, "
          ."amount, uid, data, comment, received) VALUES (%d, %d, '%s', %f, "
          ."%d, '%s', '%s', %d)", db_next_id('{uc_payment_receipts}_receipt_id'),
          $order_id, $method_name, $amount, $uid, $data, $comment, $date);

  if (module_exists('workflow_ng')) {
    workflow_ng_invoke_event('payment_entered', uc_order_load($order_id));
  }
}

/**
 * @abstract Initializes the files needed to work
 *
 * @return void
 */
function _uc_payflowpro_include_init() {
  static $loaded;
  if($loaded === true) {
    return;
  }

  // Look in the includes folder for files
  // that we MUST include. These will have
  // the extension .inc.
  $dir_path = drupal_get_path('module', 'uc_payflowpro') . '/includes';
  _uc_payflowpro_include_files($dir_path);


  $loaded = true;
  return;
}

function _uc_payflowpro_include_files($dir, $absolute = false) {
  $osinfo = _uc_payflowpro_detect_os();
  $sep = $osinfo['path_sep'];

  // Handles .svn and other misc files that we don't want to load
  if(strpos(basename($dir),'.') === 0) {
    return;
  }

  if(!$absolute) {
    $cwd = getcwd();
    $dir_path = $cwd . '/' . $dir;
    $dir_path = str_replace('/', $sep, $dir_path);
  }
  else {
    $dir_path = str_replace('/', $sep, $dir);
  }

  $files = @scandir($dir_path);
  if(!$files) {
    return;
  }
  $ext = array('module', 'inc', 'php', 'class');
  foreach($files as $k => $filename) {

    $current_path = ($absolute) ? "$dir_path/$filename" : "$cwd/$dir/$filename";
    $current_path = str_replace('/', $sep, $current_path);
    $path_parts = pathinfo("$current_path");

    $extension = $path_parts['extension'];
    if($filename != '.' && $filename != '..' ) {
      if( !is_dir($current_path) ) {
        if( in_array($extension, $ext) ) {
          include_once($current_path);
        }
      }
      else {
        _uc_payflowpro_include_files($current_path, true);
      }
    }

  }
  return;
}

function _uc_payflowpro_detect_os() {
  static $ostype;
  if($ostype != '') {
    return $ostype;
  }

  $winos = eregi("windows", strtolower(php_uname()));
  if($winos) {
    $ostype['type'] = UC_PFP_OSTYPE_WINDOWS;
    $ostype['path_sep'] = '\\';
  }
  else {
    $ostype['type'] = UC_PFP_OSTYPE_LINUX;
    $ostype['path_sep'] = '/';
  }
  return $ostype;
}

function _autopilot_sanitize_path($path) {
  if( _autopilot_detect_os == UC_PFP_OSTYPE_WINDOWS ) {
    return str_replace('/', '\\', $path);
  }
  else {
    return str_replace('\\','/', $path);
  }
}


/**
 * Debug form
 */
function uc_payflowpro_debug() {
  $form_values = $_POST;
  $page = '';

  // Process
  if($form_values['op'] == t('Send')) {
    drupal_set_message(t('Transaction sent...'));
    $response = _uc_payflowpro_submit_xml($form_values['xml_code'], $form_values['mode']);
  }

  $page .= drupal_get_form('uc_payflowpro_debug_form', $form_values);

  $page .= '<pre>' . print_r($response,1) . '</pre>';
  return $page;
}

function uc_payflowpro_debug_form($form_values = array()) {
  $form = array();
  $form['#redirect'] = false;
  $form['info'] = array('#value' => '<strong>' . t('Dont forget to use the xml header like: ' . htmlentities( '<?xml version="1.0" encoding="UTF-8"?>') .  'on the first line.') . '</strong>');
  $form['xml_code'] = array(
    '#type' => 'textarea',
    '#title' => t('XML Code to send'),
    '#rows' => 40,
    '#default_value' => $form_values['xml_code'],
  );
  $form['send'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
  );
  $form['mode'] = array(
    '#type' => 'select',
    '#title' => t('Mode'),
    '#options' => array('test' => 'Test', 'live' => 'Live'),
    '#default_value' => $form_values['mode'],
  );

  return $form;
}

/**
 * Takes a transaction object
 * and audits it.
 */
function _uc_payflowpro_audit($transaction) {
  // TODO: Finish the audit
}

/**
 *
[03-Nov-2007 05:58:30] SimpleXMLElement Object
(
    [Result] => 0
    [ProcessorResult] => SimpleXMLElement Object
        (
            [AVSResult] => Z
            [CVResult] => N
            [HostCode] => 00
        )

    [FraudPreprocessResult] => SimpleXMLElement Object
        (
            [Message] => No Rules Triggered
        )

    [FraudPostprocessResult] => SimpleXMLElement Object
        (
            [Message] => No Rules Triggered
        )

    [IAVSResult] => N
    [AVSResult] => SimpleXMLElement Object
        (
            [StreetMatch] => No Match
            [ZipMatch] => Match
        )

    [CVResult] => No Match
    [Message] => Approved
    [PNRef] => V78E0C39D7E8
    [AuthCode] => 010101
    [ExtData] => SimpleXMLElement Object
        (
            [@attributes] => Array
                (
                    [Name] => VISACARDLEVEL
                    [Value] => A
                )

        )

)


[03-Nov-2007 13:55:03] SimpleXMLElement Object
(
    [Result] => 0
    [Message] => Approved
    [ProfileID] => RT0000000148
    [RPRef] => R7950C3ABBA8
)


[03-Nov-2007 13:55:03] SimpleXMLElement Object
(
    [Result] => 0
    [ProcessorResult] => SimpleXMLElement Object
        (
            [AVSResult] => Z
            [CVResult] => N
            [HostCode] => 00
        )

    [FraudPreprocessResult] => SimpleXMLElement Object
        (
            [Message] => No Rules Triggered
        )

    [FraudPostprocessResult] => SimpleXMLElement Object
        (
            [Message] => No Rules Triggered
        )

    [IAVSResult] => N
    [AVSResult] => SimpleXMLElement Object
        (
            [StreetMatch] => No Match
            [ZipMatch] => Match
        )

    [CVResult] => No Match
    [Message] => Approved
    [PNRef] => V18E0C8B7551
    [AuthCode] => 010101
    [ExtData] => SimpleXMLElement Object
        (
            [@attributes] => Array
                (
                    [Name] => VISACARDLEVEL
                    [Value] => A
                )

        )

)


[03-Nov-2007 13:55:06] SimpleXMLElement Object
(
    [Result] => 0
    [Message] => Approved
    [ProfileID] => RT0000000149
    [RPRef] => R1950C8B7555
)
 */
